class Solution {
public:

  bool safe(vector<vector<char>>&board, int row , int col , char dig){

    // gorizontal 

    for ( int j=0;j<9;j++){
        if(board[row][j]==dig){
            return false;
        }
    }

    // vertical 

    for (int i=0; i<9 ; i++){

        if(board[i][col]== dig){
            return false;
        }
    }
    // gird 

     int srow=(row/3)*3;
     int scol= (col/3)*3;

     for ( int i=srow;i<=srow+2;i++){
        for(int j=scol;j<=scol+2;j++){
            if(board[i][j]==dig){
                return false;
            }
        }
     }
     return true ;
       }

       bool help (vector<vector<char>>&board, int row , int col){

        if(row==9){
            return true;
        }
        int nxtrow = row ,nextcol=col+1;

        if(nextcol==9){
            nxtrow=row+1;
            nextcol=0;
        }

        if(board[row][col]!='.'){
            return help(board,nxtrow,nextcol);
        }
        for(char dig='1';dig<='9';dig++){
            if(safe(board,row,col,dig)){
                board[row][col]=dig;

                if(help(board,nxtrow,nextcol)){
                    return true;
                }
                board[row][col]='.';
            }
        }
        return false;
       }
    void solveSudoku(vector<vector<char>>& board) {
        help(board,0,0);
    }
};
